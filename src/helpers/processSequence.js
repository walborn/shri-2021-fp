import {
    compose,
    allPass,
    ifElse,
    tap,
    prop,
    andThen,
    otherwise,
    test,
    mathMod,
    length,
    flip,
    partial,
} from 'ramda'

/**
 * @file –î–æ–º–∞—à–∫–∞ –ø–æ FP —á. 2
 * 
 * –ü–æ–¥—Å–∫–∞–∑–∫–∏:
 * –ú–µ—Ç–æ–¥ get —É –∏–Ω—Å—Ç–∞–Ω—Å–∞ Api ‚Äì –∫–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω—ã–π
 * GET / https://animals.tech/{id}
 * 
 * GET / https://api.tech/numbers/base
 * params:
 * ‚Äì number [Int] ‚Äì —á–∏—Å–ª–æ
 * ‚Äì from [Int] ‚Äì –∏–∑ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
 * ‚Äì to [Int] ‚Äì –≤ –∫–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è
 * 
 * –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–º–∏—Å—ã –æ—Ç API –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ rejected, (–ø—Ä—è–º–æ –∫–∞–∫ –∏ API –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏)
 * –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ {result}
 */

import Api from '../tools/api'
const api = new Api()

const isGte2Lte10 = test(/^.{3,9}$/)
const isFloat = test(/^[0-9]+\.?[0-9]*$/)
const isValid = allPass([ isFloat, isGte2Lte10 ])
const square = number => number ** 2
const parseNumber = compose(Math.round, parseFloat);

const fetchBinary = compose(
    andThen(prop('result')),
    api.get('https://api.tech/numbers/base'),
    number => ({ from: 10, to: 2, number })
)

const fetchAnimal = compose(
    andThen(prop('result')),
    animalId => api.get(`https://animals.tech/${animalId}`)({})
)

const processSequence = ({ value, writeLog, handleSuccess, handleError }) => compose(
    ifElse(
        isValid, // 2. –°—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è: 10 > length > 2 –∏ —ç—Ç–æ —á–∏—Å–ª–æ
        compose(
            otherwise(handleError),
            andThen(handleSuccess), // 9. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–º handleSuccess –≤ –∫–æ—Ç–æ—Ä—ã–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
            andThen(fetchAnimal), // 8. C –ø–æ–º–æ—â—å—é API /animals.tech/{id} –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ id
            andThen(compose(
                tap(writeLog),
                flip(mathMod)(3), // 7. –í–∑—è—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 3 ‚úèÔ∏è
                tap(writeLog),
                square, // 6. –í–æ–∑–≤–µ—Å—Ç–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç —Å –ø–æ–º–æ—â—å—é Javascript ‚úèÔ∏è
                tap(writeLog),
                length, // 5. –í–∑—è—Ç—å –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –æ—Ç API —á–∏—Å–ª–µ ‚úèÔ∏è
                tap(writeLog),
            )),
            fetchBinary, // 4. C –ø–æ–º–æ—â—å—é API /numbers/base –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ 10-–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –≤ –¥–≤–æ–∏—á–Ω—É—é ‚úèÔ∏è
            tap(writeLog),
            parseNumber, // 3. –ü—Ä–∏–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É –∫ —á–∏—Å–ª—É, –æ–∫—Ä—É–≥–ª–∏—Ç—å –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —Ü–µ–ª–æ–º—É ‚úèÔ∏è
        ),
        partial(handleError, [ 'ValidationError' ]), // üí•2. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–≤–∞—Ç—å handleError —Å 'ValidationError' —Å—Ç—Ä–æ–∫–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    ),
    tap(writeLog), // 1. –ë–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É N. –ü–∏—à–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ writeLog.
)(value)

export default processSequence

